{"ast":null,"code":"var _class, _descriptor, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, action } from 'mobx';\nimport { makeFetchRequest } from '../utils/API';\nlet PostStore = (_class = (_temp = class PostStore {\n  constructor(initialData = {}) {\n    _initializerDefineProperty(this, \"post\", _descriptor, this);\n\n    this.endpoint = 'post';\n    this.post = initialData.post;\n  }\n\n  setPost(post) {\n    this.post = post;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"post\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setPost\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setPost\"), _class.prototype)), _class);\nexport default PostStore;","map":{"version":3,"sources":["/Users/lucas/git/etri_media/hedge_front_end/stores/PostStore.js"],"names":["observable","action","makeFetchRequest","PostStore","constructor","initialData","endpoint","post","setPost"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;AAEA,SAASC,gBAAT,QAAiC,cAAjC;IAEMC,S,sBAAN,MAAMA,SAAN,CAAgB;AAKZC,EAAAA,WAAW,CAACC,WAAW,GAAG,EAAf,EAAmB;AAAA;;AAAA,SAF9BC,QAE8B,GAFnB,MAEmB;AAC1B,SAAKC,IAAL,GAAYF,WAAW,CAACE,IAAxB;AACH;;AAEOC,EAAAA,OAAR,CAAgBD,IAAhB,EAAsB;AAClB,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AAXW,C,8EACXP,U;;;;;WAAkB,I;;4DAQlBC,M;AAKL,eAAeE,SAAf","sourcesContent":["import { observable, action } from 'mobx';\n\nimport { makeFetchRequest } from '../utils/API';\n\nclass PostStore {\n    @observable post = null;\n\n    endpoint = 'post';\n\n    constructor(initialData = {}) {\n        this.post = initialData.post;\n    }\n\n    @action setPost(post) {\n        this.post = post;\n    }\n}\n\nexport default PostStore;"]},"metadata":{},"sourceType":"module"}